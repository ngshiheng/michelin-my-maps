{
    "title": "Michelin Guide Awards Historical Dataset (2019–Present)",
    "description_html": "Explore a comprehensive, research-grade database of The Michelin Guide restaurants worldwide—complete award histories, provenance tracking, and analytics-ready data since 2019.",
    "license": "MIT",
    "license_url": "https://github.com/ngshiheng/michelin-my-maps/blob/main/LICENSE",
    "source": "The Michelin Guides",
    "source_url": "https://guide.michelin.com/en/restaurants",
    "about": "michelin-my-maps",
    "about_url": "https://jerrynsh.com/building-what-michelin-wouldnt-its-awards-history/",
    "plugins": {
        "datasette-cluster-map": {
            "latitude_column": "latitude",
            "longitude_column": "longitude"
        },
        "datasette-block-robots": {
            "allow_only_index": true
        },
        "datasette-google-analytics": {
            "tracking_id": "G-VMRWWSG9KS"
        }
    },
    "databases": {
        "michelin": {
            "allow_sql": false,
            "queries": {
                "restaurant_finder": {
                    "sql": "SELECT r.name, r.location, r.cuisine, ra.price, ra.distinction as current_distinction, ra_prev.distinction as previous_distinction, r.url, r.website_url, r.phone_number, r.facilities_and_services, r.latitude, r.longitude FROM restaurants r LEFT JOIN restaurant_awards ra ON r.id = ra.restaurant_id AND ra.year = (SELECT MAX(year) FROM restaurant_awards WHERE restaurant_id = r.id) LEFT JOIN restaurant_awards ra_prev ON r.id = ra_prev.restaurant_id AND ra_prev.year = (SELECT MAX(year) FROM restaurant_awards WHERE restaurant_id = r.id AND year < (SELECT MAX(year) FROM restaurant_awards WHERE restaurant_id = r.id)) WHERE (CASE WHEN :name IS NULL OR :name = '' THEN 1=1 WHEN SUBSTR(:name, 1, 1) = '=' THEN r.name = SUBSTR(:name, 2) ELSE LOWER(r.name) LIKE LOWER('%' || :name || '%') END) AND (:location IS NULL OR :location = '' OR LOWER(r.location) LIKE LOWER('%' || :location || '%')) AND (:cuisine IS NULL OR :cuisine = '' OR LOWER(r.cuisine) LIKE LOWER('%' || :cuisine || '%')) AND (:distinction IS NULL OR :distinction = '' OR LOWER(ra.distinction) LIKE LOWER('%' || :distinction || '%')) ORDER BY CASE ra.distinction WHEN '3 Stars' THEN 1 WHEN '2 Stars' THEN 2 WHEN '1 Star' THEN 3 WHEN 'Bib Gourmand' THEN 4 WHEN 'Selected Restaurants' THEN 5 ELSE 6 END, r.name LIMIT CASE WHEN :limit IS NULL OR :limit = '' THEN 50 ELSE :limit END",
                    "title": "Restaurant & Award Finder",
                    "description": "Search restaurants by name, location, cuisine, or distinction. Instantly see current and previous awards, map data, and details. Filter by name (exact match with '=' prefix), location, cuisine, distinction. Sorted by distinction and name. Default limit: 50.",
                    "params": ["name", "location", "cuisine", "distinction", "limit"],
                    "plugins": {
                        "datasette-cluster-map": {
                            "latitude_column": "latitude",
                            "longitude_column": "longitude",
                            "popup_html": "<b>{name}</b><br>Location: {location}<br>Current: {current_distinction}<br>Cuisine: {cuisine}<br>Status: {award_status}"
                        }
                    }
                },
                "award_timeline": {
                    "sql": "SELECT r.name, r.location, r.cuisine, COALESCE(NULLIF(ra.wayback_url,''), r.url ) as 'url', ra.distinction, ra.price, ra.year, ra.green_star FROM restaurants r JOIN restaurant_awards ra ON r.id = ra.restaurant_id WHERE (CASE WHEN :name IS NULL OR :name = '' THEN 1=1 WHEN SUBSTR(:name, 1, 1) = '=' THEN r.name = SUBSTR(:name, 2) ELSE LOWER(r.name) LIKE LOWER('%' || :name || '%') END) AND (:location IS NULL OR :location = '' OR LOWER(r.location) LIKE LOWER('%' || :location || '%')) AND (:cuisine IS NULL OR :cuisine = '' OR LOWER(r.cuisine) LIKE LOWER('%' || :cuisine || '%')) AND (:distinction IS NULL OR :distinction = '' OR LOWER(ra.distinction) LIKE LOWER('%' || :distinction || '%')) AND (:start_year IS NULL OR :start_year = '' OR ra.year >= :start_year) AND (:end_year IS NULL OR :end_year = '' OR ra.year <= :end_year) ORDER BY r.name, ra.year DESC LIMIT CASE WHEN :limit IS NULL OR :limit = '' THEN 50 ELSE :limit END",
                    "title": "Award Timeline Viewer",
                    "description": "Explore the complete award history for any restaurant. Filter by name (exact match with '=' prefix), location, cuisine, distinction, start year, end year. Sorted by name and year. Default limit: 50.",
                    "params": ["name", "location", "cuisine", "distinction", "start_year", "end_year", "limit"]
                },
                "michelin_star_streaks": {
                    "sql": "SELECT r.name, r.location, r.cuisine, r.url, ra.distinction, ra.price, MIN(ra.year) as start_year, MAX(ra.year) as end_year, COUNT(*) as streak_length, SUM(CASE WHEN ra.green_star = 1 THEN 1 ELSE 0 END) as green_star_years FROM restaurants r JOIN restaurant_awards ra ON r.id = ra.restaurant_id WHERE ra.distinction IN ('3 Stars', '2 Stars', '1 Star') AND (CASE WHEN :name IS NULL OR :name = '' THEN 1=1 WHEN SUBSTR(:name, 1, 1) = '=' THEN r.name = SUBSTR(:name, 2) ELSE LOWER(r.name) LIKE LOWER('%' || :name || '%') END) AND (:location IS NULL OR :location = '' OR LOWER(r.location) LIKE LOWER('%' || :location || '%')) AND (:cuisine IS NULL OR :cuisine = '' OR LOWER(r.cuisine) LIKE LOWER('%' || :cuisine || '%')) AND (:distinction IS NULL OR :distinction = '' OR LOWER(ra.distinction) LIKE LOWER('%' || :distinction || '%')) AND (:start_year IS NULL OR :start_year = '' OR ra.year >= :start_year) AND (:end_year IS NULL OR :end_year = '' OR ra.year <= :end_year) GROUP BY r.id, ra.distinction HAVING streak_length >= 2 ORDER BY streak_length DESC, ra.distinction DESC, r.name LIMIT CASE WHEN :limit IS NULL OR :limit = '' THEN 50 ELSE :limit END",
                    "title": "Longest Star Streaks",
                    "description": "Find restaurants with the longest consecutive years at each Michelin Star level, including Green Star awards. Filter by name (exact match with '=' prefix), location, cuisine, distinction, start year, end year. Sorted by streak length and distinction. Default limit: 50.",
                    "params": ["name", "location", "cuisine", "distinction", "start_year", "end_year", "limit"]
                },
                "star_progression": {
                    "sql": "WITH progression_data AS (SELECT r.id, r.name, r.location, r.cuisine, MIN(CASE WHEN ra.distinction = 'Selected Restaurants' THEN ra.year END) as first_selected_year, MIN(CASE WHEN ra.distinction = 'Bib Gourmand' THEN ra.year END) as first_bib_year, MIN(CASE WHEN ra.distinction LIKE '%Star%' THEN ra.year END) as first_star_year, MAX(CASE WHEN ra.distinction = '3 Stars' THEN ra.year END) as three_star_year, MAX(CASE WHEN ra.distinction LIKE '%Star%' THEN ra.distinction END) as highest_star FROM restaurants r JOIN restaurant_awards ra ON r.id = ra.restaurant_id GROUP BY r.id), progression_calc AS (SELECT pd.*, CASE WHEN pd.three_star_year IS NOT NULL THEN (pd.three_star_year - COALESCE(pd.first_star_year, COALESCE(pd.first_bib_year, pd.first_selected_year))) WHEN pd.first_star_year IS NOT NULL AND (pd.first_bib_year IS NOT NULL OR pd.first_selected_year IS NOT NULL) THEN (pd.first_star_year - COALESCE(pd.first_bib_year, pd.first_selected_year)) ELSE NULL END as progression_years FROM progression_data pd WHERE (pd.three_star_year IS NOT NULL OR (pd.first_star_year IS NOT NULL AND (pd.first_bib_year IS NOT NULL OR pd.first_selected_year IS NOT NULL)))) SELECT pc.name, pc.location, pc.cuisine, pc.first_selected_year, pc.first_bib_year, pc.first_star_year, pc.three_star_year, pc.highest_star, ABS(pc.progression_years) as years_to_change, CASE WHEN pc.progression_years > 0 THEN 'Progression' ELSE 'Regression' END as progression_status FROM progression_calc pc WHERE pc.progression_years IS NOT NULL AND (CASE WHEN :name IS NULL OR :name = '' THEN 1=1 WHEN SUBSTR(:name, 1, 1) = '=' THEN pc.name = SUBSTR(:name, 2) ELSE LOWER(pc.name) LIKE LOWER('%' || :name || '%') END) AND (:location IS NULL OR :location = '' OR LOWER(pc.location) LIKE LOWER('%' || :location || '%')) AND (:cuisine IS NULL OR :cuisine = '' OR LOWER(pc.cuisine) LIKE LOWER('%' || :cuisine || '%')) AND (:progression_status IS NULL OR :progression_status = '' OR progression_status = :progression_status) ORDER BY pc.progression_years ASC LIMIT CASE WHEN :limit IS NULL OR :limit = '' THEN 50 ELSE :limit END",
                    "title": "Progression & Regression Pathways",
                    "description": "Shows how restaurants move between Selected Restaurants, Bib Gourmand, and Michelin Stars—including both progression and regression. 'progression_status' indicates direction; 'years_to_change' is the absolute number of years to progress or regress. Filter by name (exact match with '=' prefix), location, cuisine, progression_status (Progression/Regression). Default limit: 50.",
                    "params": ["name", "location", "cuisine", "progression_status", "limit"]
                },
                "star_change_tracker": {
                    "sql": "WITH distinction_changes AS (SELECT r.id, r.name, r.location, r.cuisine, ra1.year, ra1.distinction as current_distinction, LAG(ra1.distinction) OVER (PARTITION BY r.id ORDER BY ra1.year) as previous_distinction FROM restaurants r JOIN restaurant_awards ra1 ON r.id = ra1.restaurant_id WHERE ra1.distinction IN ('3 Stars', '2 Stars', '1 Star', 'Bib Gourmand', 'Selected Restaurants') ORDER BY r.id, ra1.year) SELECT dc.name, dc.location, dc.cuisine, COUNT(CASE WHEN dc.current_distinction != dc.previous_distinction THEN 1 END) as total_changes, GROUP_CONCAT(CASE WHEN dc.current_distinction != dc.previous_distinction THEN dc.year || ': ' || dc.previous_distinction || ' → ' || dc.current_distinction ELSE NULL END, ' | ') as change_history FROM distinction_changes dc WHERE dc.previous_distinction IS NOT NULL AND (CASE WHEN :name IS NULL OR :name = '' THEN 1=1 WHEN SUBSTR(:name, 1, 1) = '=' THEN dc.name = SUBSTR(:name, 2) ELSE LOWER(dc.name) LIKE LOWER('%' || :name || '%') END) AND (:location IS NULL OR :location = '' OR LOWER(dc.location) LIKE LOWER('%' || :location || '%')) GROUP BY dc.id, dc.name, dc.location, dc.cuisine HAVING total_changes > 0 AND (:total_changes IS NULL OR :total_changes = '' OR total_changes = CAST(:total_changes AS INTEGER)) ORDER BY total_changes DESC LIMIT CASE WHEN :limit IS NULL OR :limit = '' THEN 30 ELSE :limit END",
                    "title": "Distinction Change Tracker",
                    "description": "Track restaurants with changes in Michelin distinctions—including Stars, Bib Gourmand, and Selected Restaurants. View their transformation history (only years with actual changes). Filter by name (exact match with '=' prefix), location, exact total changes. Sorted by most volatile. Default limit: 30.",
                    "params": ["name", "location", "total_changes", "limit"]
                },
                "cuisine_breakdown": {
                    "sql": "WITH filtered_awards AS (SELECT * FROM restaurant_awards WHERE (:year IS NULL OR :year = '' OR year = :year)), latest_awards AS (SELECT ra.* FROM restaurant_awards ra INNER JOIN (SELECT restaurant_id, MAX(year) AS max_year FROM restaurant_awards GROUP BY restaurant_id) lam ON ra.restaurant_id = lam.restaurant_id AND ra.year = lam.max_year), awards_to_join AS (SELECT * FROM filtered_awards WHERE :year IS NOT NULL AND :year <> '' UNION ALL SELECT * FROM latest_awards WHERE :year IS NULL OR :year = ''), joined AS (SELECT r.cuisine, ra.* FROM restaurants r LEFT JOIN awards_to_join ra ON r.id = ra.restaurant_id WHERE (:cuisine IS NULL OR :cuisine = '' OR LOWER(r.cuisine) LIKE LOWER('%' || :cuisine || '%')) AND (:distinction IS NULL OR :distinction = '' OR LOWER(ra.distinction) LIKE LOWER('%' || :distinction || '%'))) SELECT cuisine, COUNT(DISTINCT restaurant_id) as total_restaurants, COUNT(CASE WHEN distinction = '3 Stars' THEN 1 END) as three_stars, COUNT(CASE WHEN distinction = '2 Stars' THEN 1 END) as two_stars, COUNT(CASE WHEN distinction = '1 Star' THEN 1 END) as one_star, COUNT(CASE WHEN distinction = 'Bib Gourmand' THEN 1 END) as bib_gourmand, COUNT(CASE WHEN distinction = 'Selected Restaurants' THEN 1 END) as selected_restaurants, COUNT(CASE WHEN green_star = 1 THEN 1 END) as green_star FROM joined GROUP BY cuisine HAVING total_restaurants >= 1 ORDER BY three_stars DESC, two_stars DESC, one_star DESC, total_restaurants DESC LIMIT CASE WHEN :limit IS NULL OR :limit = '' THEN 50 ELSE :limit END",
                    "title": "Cuisine Awards Breakdown",
                    "description": "Compare award distribution across cuisines for any year. Filter by cuisine, distinction, year. Sorted by distinction and total. Default limit: 50.",
                    "params": ["cuisine", "distinction", "year", "limit"]
                },
                "location_breakdown": {
                    "sql": "SELECT TRIM(SUBSTR(r.location, 1, CASE WHEN INSTR(r.location, ',') > 0 THEN INSTR(r.location, ',') - 1 ELSE LENGTH(r.location) END)) AS city, CASE WHEN INSTR(r.location, ',') > 0 THEN TRIM(SUBSTR(r.location, INSTR(r.location, ',') + 1)) ELSE TRIM(r.location) END AS region, COUNT(DISTINCT r.id) as total_restaurants, COUNT(CASE WHEN ra.distinction = '3 Stars' THEN 1 END) as three_stars, COUNT(CASE WHEN ra.distinction = '2 Stars' THEN 1 END) as two_stars, COUNT(CASE WHEN ra.distinction = '1 Star' THEN 1 END) as one_star, COUNT(CASE WHEN ra.distinction = 'Bib Gourmand' THEN 1 END) as bib_gourmand, COUNT(CASE WHEN ra.distinction = 'Selected Restaurants' THEN 1 END) as selected_restaurants, COUNT(CASE WHEN ra.green_star = 1 THEN 1 END) as green_star FROM restaurants r JOIN (SELECT * FROM restaurant_awards WHERE (:year IS NULL OR :year = '' OR year = :year) AND year = CASE WHEN :year IS NULL OR :year = '' THEN (SELECT MAX(year) FROM restaurant_awards WHERE restaurant_id = restaurant_awards.restaurant_id) ELSE :year END) ra ON r.id = ra.restaurant_id WHERE (:location IS NULL OR :location = '' OR LOWER(r.location) LIKE LOWER('%' || :location || '%')) AND (:distinction IS NULL OR :distinction = '' OR LOWER(ra.distinction) LIKE LOWER('%' || :distinction || '%')) GROUP BY city, region HAVING total_restaurants >= 1 ORDER BY three_stars DESC, two_stars DESC, one_star DESC, total_restaurants DESC LIMIT CASE WHEN :limit IS NULL OR :limit = '' THEN 50 ELSE :limit END",
                    "title": "Location Awards Breakdown",
                    "description": "Analyze award counts by city and region for any year. Filter by location, distinction, year. Sorted by distinction and total. Default limit: 50.",
                    "params": ["location", "distinction", "year", "limit"]
                },
                "price_breakdown": {
                    "sql": "SELECT ra.price, COUNT(DISTINCT ra.restaurant_id) as total_restaurants, SUM(CASE WHEN ra.distinction = '3 Stars' THEN 1 ELSE 0 END) as three_stars, SUM(CASE WHEN ra.distinction = '2 Stars' THEN 1 ELSE 0 END) as two_stars, SUM(CASE WHEN ra.distinction = '1 Star' THEN 1 ELSE 0 END) as one_star, SUM(CASE WHEN ra.distinction = 'Bib Gourmand' THEN 1 ELSE 0 END) as bib_gourmand, SUM(CASE WHEN ra.distinction = 'Selected Restaurants' THEN 1 ELSE 0 END) as selected_restaurants, SUM(CASE WHEN ra.green_star = 1 THEN 1 ELSE 0 END) as green_star FROM restaurants r JOIN restaurant_awards ra ON r.id = ra.restaurant_id WHERE ra.price IS NOT NULL AND (:price IS NULL OR :price = '' OR LOWER(ra.price) LIKE LOWER('%' || :price || '%')) AND (:distinction IS NULL OR :distinction = '' OR LOWER(ra.distinction) LIKE LOWER('%' || :distinction || '%')) AND (:year IS NULL OR :year = '' OR ra.year = :year) AND ra.year = CASE WHEN :year IS NULL OR :year = '' THEN (SELECT MAX(year) FROM restaurant_awards WHERE restaurant_id = r.id) ELSE :year END GROUP BY ra.price ORDER BY ra.price LIMIT CASE WHEN :limit IS NULL OR :limit = '' THEN 50 ELSE :limit END",
                    "title": "Price & Awards Breakdown",
                    "description": "See award counts by price range for any year. Filter by price, distinction, year. Sorted by distinction and price. Default limit: 50.",
                    "params": ["price", "distinction", "year", "limit"]
                },
                "facilities_breakdown": {
                    "sql": "WITH facilities_split AS (SELECT r.name, r.location, ra.distinction, ra.green_star, TRIM(REPLACE(REPLACE(facility.value, '\"', ''), '[', '')) as facility FROM restaurants r JOIN restaurant_awards ra ON r.id = ra.restaurant_id AND ra.year = CASE WHEN :year IS NULL OR :year = '' THEN (SELECT MAX(year) FROM restaurant_awards WHERE restaurant_id = r.id) ELSE :year END, json_each('[\"' || REPLACE(r.facilities_and_services, ',', '\",\"') || '\"]') as facility WHERE r.facilities_and_services IS NOT NULL AND r.facilities_and_services != '' AND (:distinction IS NULL OR :distinction = '' OR LOWER(ra.distinction) LIKE LOWER('%' || :distinction || '%'))) SELECT facility, COUNT(*) as total_restaurants, COUNT(CASE WHEN distinction = '3 Stars' THEN 1 END) as three_stars, COUNT(CASE WHEN distinction = '2 Stars' THEN 1 END) as two_stars, COUNT(CASE WHEN distinction = '1 Star' THEN 1 END) as one_star, COUNT(CASE WHEN distinction = 'Bib Gourmand' THEN 1 END) as bib_gourmand, COUNT(CASE WHEN distinction = 'Selected Restaurants' THEN 1 END) as selected_restaurants, COUNT(CASE WHEN green_star = 1 THEN 1 END) as green_star FROM facilities_split WHERE facility != '' AND (:facility IS NULL OR :facility = '' OR LOWER(facility) LIKE LOWER('%' || :facility || '%')) GROUP BY facility HAVING total_restaurants >= 1 ORDER BY three_stars DESC, two_stars DESC, one_star DESC, total_restaurants DESC LIMIT CASE WHEN :limit IS NULL OR :limit = '' THEN 20 ELSE :limit END",
                    "title": "Facility & Awards Breakdown",
                    "description": "Discover how facilities and services relate to Michelin awards. Filter by facility, distinction, year. Sorted by distinction and total. Default limit: 30.",
                    "params": ["facility", "distinction", "year", "limit"]
                },
                "green_star_trends": {
                    "sql": "SELECT ra.year, COUNT(*) as green_star_count FROM restaurant_awards ra WHERE ra.green_star = 1 AND (:start_year IS NULL OR :start_year = '' OR ra.year >= :start_year) AND (:end_year IS NULL OR :end_year = '' OR ra.year <= :end_year) GROUP BY ra.year ORDER BY ra.year",
                    "title": "Green Star Growth Trends",
                    "description": "Track the rise of Michelin Green Stars over time. Filter by start year, end year. Sorted by year.",
                    "params": ["start_year", "end_year"]
                }
            },
            "tables": {
                "restaurants": {
                    "sort": "updated_at",
                    "sortable_columns": ["name", "location", "cuisine", "created_at", "updated_at"],
                    "facets": ["location", "cuisine"],
                    "description_html": "Core dataset of Michelin Guide restaurants with comprehensive information including location, cuisine type, facilities, and contact details.",
                    "plugins": {
                        "datasette-cluster-map": {
                            "latitude_column": "latitude",
                            "longitude_column": "longitude"
                        }
                    },
                    "columns": {
                        "id": "Internal unique identifier for the restaurant",
                        "address": "Address of the restaurant",
                        "cuisine": "Type of cuisines served at the restaurant",
                        "description": "Michelin Guide description of the restaurant",
                        "facilities_and_services": "Facilities and services offered at the restaurant",
                        "location": "Location of the restaurant",
                        "latitude": "Latitude coordinates of the restaurant",
                        "longitude": "Longitude coordinates of the restaurant",
                        "name": "Name of the restaurant",
                        "phone_number": "Contact phone number of the restaurant",
                        "url": "Michelin Guide URL of the restaurant's listing",
                        "website_url": "URL of the restaurant's official website",
                        "created_at": "Timestamp when the restaurant record was created",
                        "updated_at": "Timestamp when the restaurant record was last updated"
                    }
                },
                "restaurant_awards": {
                    "sort": "updated_at",
                    "sortable_columns": ["year", "distinction", "price", "green_star", "created_at", "updated_at"],
                    "facets": ["year", "distinction", "price", "green_star"],
                    "description_html": "Historical dataset of Michelin awards including stars, Bib Gourmand designations, price ranges, and Green Star sustainability awards by year.",
                    "columns": {
                        "id": "Internal unique identifier for the award record",
                        "restaurant_id": "Foreign key reference to the restaurant",
                        "year": "Year when the award was given",
                        "distinction": "Type of Michelin distinction (e.g., 3 Stars, 2 Stars, 1 Star, Bib Gourmand, Selected Restaurants)",
                        "price": "Price range of the restaurant for this award year (e.g., $, $$, $$$)",
                        "green_star": "Boolean indicating whether the restaurant received a Michelin Green Star for sustainable gastronomy practices",
                        "created_at": "Timestamp when the award record was created",
                        "updated_at": "Timestamp when the award record was last updated"
                    }
                },
                "sqlite_sequence": {
                    "hidden": true
                }
            }
        }
    }
}
